name: Release

# RELEASE PROCESS
#
# === Automated activities ===
#
# 1. Run tests, linting, security and complexity base line
# 2. Bump package version and generate latest Changelog
# 3. Publish package to PyPi test and prod repository
# 4. Kick off SAR App pipeline to publish latest version with minimal and extra dependencies
# 5. Builds and publish latest changelog from tip of the branch
# 6. Builds a new user guide and API docs with release version; update /latest pointing to newly released version
# 7. Close all issues labeled "pending-release" and notify customers about the release
#
# === Manual activities ===
#
# 1. Edit the current draft release notes
# 2. If not already set, use `v<new version>` as a tag, e.g., v1.26.4, and select develop as target branch

# See MAINTAINERS.md "Releasing a new version" for release mechanisms

env:
  BRANCH: develop
  ORIGIN: heitorlessa/aws-lambda-powertools-python-test

on:
  workflow_dispatch:
    inputs:
      version_to_publish:
        description: "Version to be released in PyPi, Docs, and Lambda Layer, e.g. v2.0.0, v2.0.0a0 (pre-release)"
        default: v2.0.0
        required: true
      skip_pypi:
        description: "Skip publishing to PyPi as it can't publish more than once. Useful for semi-failed releases"
        default: false
        type: boolean
        required: false
      skip_code_quality:
        description: "Skip tests, linting, and baseline. Only use if release fail for reasons beyond our control and you need a quick release."
        default: false
        type: boolean
        required: false
      pre_release:
        description: "Publishes documentation using a pre-release tag (v2.0.0a0). You are still responsible for passing a pre-release version tag to the workflow."
        default: false
        type: boolean
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      RELEASE_VERSION: ${{ steps.release_version.outputs.RELEASE_VERSION }}
    env:
      RELEASE_TAG_VERSION: ${{ inputs.version_to_publish }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"
      - name: Set release notes tag
        id: release_version
        # transform tag format `v<version` to `<version`
        run: |
          RELEASE_VERSION="${RELEASE_TAG_VERSION:1}"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "$GITHUB_OUTPUT"
      - name: Install dependencies
        run: make dev
      - name: Run all tests, linting and baselines
        if: ${{ !inputs.skip_code_quality }}
        run: make pr
      - name: Git client setup and refresh tip
        run: |
          git config user.name "Release bot"
          git config user.email "aws-devax-open-source@amazon.com"
          git config pull.rebase true
          git config remote.origin.url >&- || git remote add origin https://github.com/"${ORIGIN}" # Git Detached mode (release notes) doesn't have origin
          git pull origin "${BRANCH}"
      - name: Bump package version
        id: versioning
        run: poetry version "${RELEASE_VERSION}"
      - name: Build python package and wheel
        if: ${{ !inputs.skip_pypi }}
        run: poetry build

      - name: Cache build artifact
        id: cache-release-build
        uses: actions/cache/save@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: dist/
          key: ${{ runner.os}}-${{ hashFiles('**/poetry.lock')}}

      - name: Update version in trunk
        if: steps.versioning.outcome == 'success'
        run: |
          HAS_CHANGE=$(git status --porcelain)
          test -z "${HAS_CHANGE}" && echo "Nothing to update" && exit 0
          git add pyproject.toml
          git commit -m "bump version to ${RELEASE_VERSION}" --no-verify
          git pull origin "${BRANCH}" # prevents concurrent branch update failing push
          git push origin HEAD:refs/heads/"${BRANCH}"

  signing:
    needs: build
    environment: release
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC for PyPi Trusted Publisher feature
      contents: write # upload signing artifacts to be verified later more easily by customers
    steps:
      - uses: actions/checkout@v3
      - name: Restore build artifact from cache
        id: restore-release-build
        uses: actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: dist/
          key: ${{ runner.os}}-${{ hashFiles('**/poetry.lock')}}

      - name: Sign build
        uses: sigstore/gh-action-sigstore-python@e323e1b02e26cc6600843935562c862b94200b0c # v1.2.3
        with:
          upload-signing-artifacts: true
          release-signing-artifacts: true
          inputs: |
            "dist/aws_lambda_powertools-${RELEASE_VERSION}.tar.gz"
            "dist/aws_lambda_powertools-${RELEASE_VERSION}*.whl"

  release:
    needs: signing
    environment: release
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC for PyPi Trusted Publisher feature
    steps:
      - uses: actions/checkout@v3
      - name: Restore build artifact from cache
        id: restore-release-build
        uses: actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: dist/
          key: ${{ runner.os}}-${{ hashFiles('**/poetry.lock')}}

      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@0bf742be3ebe032c25dd15117957dc15d0cfc38d # v1.8.5
        with:
          repository-url: https://test.pypi.org/legacy/
# NOTE: Tasks
# - [x] Use new pypa publishing action pinned
# - [x] Test publishing to test without token
# - [x] Separate build for signing vs publishing
# - [ ] Make permissions stricter: build, signing

# Unrelated and optional but useful tasks we have to do anyway
# - [ ] Create PR from Action instead of pushing (this will be the base for other related tasks like changelog)

# TODO: Save signing and provenance in the GitHub Release itself
## We might get in trouble due to our Release Drafter (what if it runs?)
## https://sethmlarson.dev/python-and-slsa
