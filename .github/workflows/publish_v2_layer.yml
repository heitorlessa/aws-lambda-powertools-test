name: Deploy v2 layer to all regions

permissions:
  id-token: write
  contents: write
  pages: write

on:
  workflow_dispatch:
    inputs:
      latest_published_version:
        description: "Latest PyPi published version to rebuild latest docs for, e.g. 2.0.0, 2.0.0a1 (pre-release)"
        required: true
      pre_release:
        description: "Publishes documentation using a pre-release tag (2.0.0a1)."
        default: false
        type: boolean
        required: false
  workflow_call:
    inputs:
      latest_published_version:
        type: string
        description: "Latest PyPi published version to rebuild latest docs for, e.g. 2.0.0, 2.0.0a1 (pre-release)"
        required: true
      pre_release:
        description: "Publishes documentation using a pre-release tag (2.0.0a1)."
        default: false
        type: boolean
        required: false

jobs:
  build-layer:
    permissions:
      contents: read
    runs-on: aws-lambda-powertools_ubuntu-latest_8-core
    defaults:
      run:
        working-directory: ./layer
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install poetry
        run: pipx install poetry
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.12"
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Resolve and install project dependencies
        # CDK spawns system python when compiling stack
        # therefore it ignores both activated virtual env and cached interpreter by GH
        run: |
          poetry export --format requirements.txt --output requirements.txt
          pip install -r requirements.txt
      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2.0.0
        with:
          platforms: arm64
        # NOTE: we need QEMU to build Layer against a different architecture (e.g., ARM)
      - name: Set up Docker Buildx
        id: builder
        uses: docker/setup-buildx-action@6a58db7e0d21ca03e6c44877909e80e45217eed2 # v2.6.0
        with:
          install: true
          driver: docker
          platforms: linux/amd64,linux/arm64
      - name: install cdk and deps
        working-directory: ./
        run: |
          npm install
          npx cdk --version
      - name: CDK build
        run: npx cdk synth --verbose --context version="${{ inputs.latest_published_version }}" -o cdk.out
      - name: zip output
        run: zip -r cdk.out.zip cdk.out
      - name: Archive CDK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cdk-layer-artefact
          path: layer/cdk.out.zip

  beta:
    needs: build-layer
    uses: ./.github/workflows/reusable_deploy_v2_layer_stack.yml
    secrets: inherit
    with:
      stage: "BETA"
      artefact-name: "cdk-layer-artefact"
      environment: "layer-beta"
      latest_published_version: ${{ inputs.latest_published_version }}

  prod:
    needs: beta
    uses: ./.github/workflows/reusable_deploy_v2_layer_stack.yml
    secrets: inherit
    with:
      stage: "PROD"
      artefact-name: "cdk-layer-artefact"
      environment: "layer-prod"
      latest_published_version: ${{ inputs.latest_published_version }}

  sar-beta:
    needs: build-layer
    uses: ./.github/workflows/reusable_deploy_v2_sar.yml
    secrets: inherit
    with:
      stage: "BETA"
      artefact-name: "cdk-layer-artefact"
      environment: "layer-beta"
      package-version: ${{ inputs.latest_published_version }}

  sar-prod:
    needs: [build-layer, sar-beta]
    uses: ./.github/workflows/reusable_deploy_v2_sar.yml
    secrets: inherit
    with:
      stage: "PROD"
      artefact-name: "cdk-layer-artefact"
      environment: "layer-prod"
      package-version: ${{ inputs.latest_published_version }}

  prepare_docs_alias:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      DOCS_ALIAS: ${{ steps.set-alias.outputs.DOCS_ALIAS }}
    steps:
      - name: Set docs alias
        id: set-alias
        run: |
          DOCS_ALIAS=latest
          if [[ "${{ inputs.pre_release }}" == true ]] ; then
            DOCS_ALIAS=alpha
          fi
          echo DOCS_ALIAS="$DOCS_ALIAS" >> "$GITHUB_OUTPUT"

  release-docs:
    needs: [prod, prepare_docs_alias]
    permissions:
      contents: write
      pages: write
    uses: ./.github/workflows/reusable_publish_docs.yml
    with:
      version: ${{ inputs.latest_published_version }}
      alias: ${{ needs.prepare_docs_alias.outputs.DOCS_ALIAS }}
      detached_mode: true
